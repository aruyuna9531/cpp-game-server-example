// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/frame_input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fframe_5finput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fframe_5finput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fframe_5finput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fframe_5finput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fframe_5finput_2eproto;
namespace proto {
class CS_ConnectMsg;
class CS_ConnectMsgDefaultTypeInternal;
extern CS_ConnectMsgDefaultTypeInternal _CS_ConnectMsg_default_instance_;
class CS_InputMsg;
class CS_InputMsgDefaultTypeInternal;
extern CS_InputMsgDefaultTypeInternal _CS_InputMsg_default_instance_;
class CS_ProgressMsg;
class CS_ProgressMsgDefaultTypeInternal;
extern CS_ProgressMsgDefaultTypeInternal _CS_ProgressMsg_default_instance_;
class CS_ResultMsg;
class CS_ResultMsgDefaultTypeInternal;
extern CS_ResultMsgDefaultTypeInternal _CS_ResultMsg_default_instance_;
class FrameData;
class FrameDataDefaultTypeInternal;
extern FrameDataDefaultTypeInternal _FrameData_default_instance_;
class InputData;
class InputDataDefaultTypeInternal;
extern InputDataDefaultTypeInternal _InputData_default_instance_;
class SC_ConnectMsg;
class SC_ConnectMsgDefaultTypeInternal;
extern SC_ConnectMsgDefaultTypeInternal _SC_ConnectMsg_default_instance_;
class SC_FrameMsg;
class SC_FrameMsgDefaultTypeInternal;
extern SC_FrameMsgDefaultTypeInternal _SC_FrameMsg_default_instance_;
class SC_JoinRoomMsg;
class SC_JoinRoomMsgDefaultTypeInternal;
extern SC_JoinRoomMsgDefaultTypeInternal _SC_JoinRoomMsg_default_instance_;
class SC_ProgressMsg;
class SC_ProgressMsgDefaultTypeInternal;
extern SC_ProgressMsgDefaultTypeInternal _SC_ProgressMsg_default_instance_;
class SC_StartMsg;
class SC_StartMsgDefaultTypeInternal;
extern SC_StartMsgDefaultTypeInternal _SC_StartMsg_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CS_ConnectMsg* Arena::CreateMaybeMessage<::proto::CS_ConnectMsg>(Arena*);
template<> ::proto::CS_InputMsg* Arena::CreateMaybeMessage<::proto::CS_InputMsg>(Arena*);
template<> ::proto::CS_ProgressMsg* Arena::CreateMaybeMessage<::proto::CS_ProgressMsg>(Arena*);
template<> ::proto::CS_ResultMsg* Arena::CreateMaybeMessage<::proto::CS_ResultMsg>(Arena*);
template<> ::proto::FrameData* Arena::CreateMaybeMessage<::proto::FrameData>(Arena*);
template<> ::proto::InputData* Arena::CreateMaybeMessage<::proto::InputData>(Arena*);
template<> ::proto::SC_ConnectMsg* Arena::CreateMaybeMessage<::proto::SC_ConnectMsg>(Arena*);
template<> ::proto::SC_FrameMsg* Arena::CreateMaybeMessage<::proto::SC_FrameMsg>(Arena*);
template<> ::proto::SC_JoinRoomMsg* Arena::CreateMaybeMessage<::proto::SC_JoinRoomMsg>(Arena*);
template<> ::proto::SC_ProgressMsg* Arena::CreateMaybeMessage<::proto::SC_ProgressMsg>(Arena*);
template<> ::proto::SC_StartMsg* Arena::CreateMaybeMessage<::proto::SC_StartMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CS_ConnectMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CS_ConnectMsg) */ {
 public:
  inline CS_ConnectMsg() : CS_ConnectMsg(nullptr) {};
  virtual ~CS_ConnectMsg();

  CS_ConnectMsg(const CS_ConnectMsg& from);
  CS_ConnectMsg(CS_ConnectMsg&& from) noexcept
    : CS_ConnectMsg() {
    *this = ::std::move(from);
  }

  inline CS_ConnectMsg& operator=(const CS_ConnectMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ConnectMsg& operator=(CS_ConnectMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ConnectMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ConnectMsg* internal_default_instance() {
    return reinterpret_cast<const CS_ConnectMsg*>(
               &_CS_ConnectMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CS_ConnectMsg& a, CS_ConnectMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ConnectMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ConnectMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ConnectMsg* New() const final {
    return CreateMaybeMessage<CS_ConnectMsg>(nullptr);
  }

  CS_ConnectMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ConnectMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ConnectMsg& from);
  void MergeFrom(const CS_ConnectMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ConnectMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CS_ConnectMsg";
  }
  protected:
  explicit CS_ConnectMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kPlayerIDFieldNumber = 1,
    kBattleIDFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 battleID = 2;
  void clear_battleid();
  ::PROTOBUF_NAMESPACE_ID::uint64 battleid() const;
  void set_battleid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_battleid() const;
  void _internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CS_ConnectMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 battleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class SC_ConnectMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SC_ConnectMsg) */ {
 public:
  inline SC_ConnectMsg() : SC_ConnectMsg(nullptr) {};
  virtual ~SC_ConnectMsg();

  SC_ConnectMsg(const SC_ConnectMsg& from);
  SC_ConnectMsg(SC_ConnectMsg&& from) noexcept
    : SC_ConnectMsg() {
    *this = ::std::move(from);
  }

  inline SC_ConnectMsg& operator=(const SC_ConnectMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ConnectMsg& operator=(SC_ConnectMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ConnectMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ConnectMsg* internal_default_instance() {
    return reinterpret_cast<const SC_ConnectMsg*>(
               &_SC_ConnectMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_ConnectMsg& a, SC_ConnectMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ConnectMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ConnectMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ConnectMsg* New() const final {
    return CreateMaybeMessage<SC_ConnectMsg>(nullptr);
  }

  SC_ConnectMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ConnectMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ConnectMsg& from);
  void MergeFrom(const SC_ConnectMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ConnectMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SC_ConnectMsg";
  }
  protected:
  explicit SC_ConnectMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // int32 errorCode = 1;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SC_ConnectMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class SC_JoinRoomMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SC_JoinRoomMsg) */ {
 public:
  inline SC_JoinRoomMsg() : SC_JoinRoomMsg(nullptr) {};
  virtual ~SC_JoinRoomMsg();

  SC_JoinRoomMsg(const SC_JoinRoomMsg& from);
  SC_JoinRoomMsg(SC_JoinRoomMsg&& from) noexcept
    : SC_JoinRoomMsg() {
    *this = ::std::move(from);
  }

  inline SC_JoinRoomMsg& operator=(const SC_JoinRoomMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_JoinRoomMsg& operator=(SC_JoinRoomMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_JoinRoomMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_JoinRoomMsg* internal_default_instance() {
    return reinterpret_cast<const SC_JoinRoomMsg*>(
               &_SC_JoinRoomMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_JoinRoomMsg& a, SC_JoinRoomMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_JoinRoomMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_JoinRoomMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_JoinRoomMsg* New() const final {
    return CreateMaybeMessage<SC_JoinRoomMsg>(nullptr);
  }

  SC_JoinRoomMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_JoinRoomMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_JoinRoomMsg& from);
  void MergeFrom(const SC_JoinRoomMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_JoinRoomMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SC_JoinRoomMsg";
  }
  protected:
  explicit SC_JoinRoomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOthersFieldNumber = 2,
    kProsFieldNumber = 3,
    kRoomseatidFieldNumber = 1,
    kRandomSeedFieldNumber = 4,
  };
  // repeated uint64 others = 2;
  int others_size() const;
  private:
  int _internal_others_size() const;
  public:
  void clear_others();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_others(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_others() const;
  void _internal_add_others(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_others();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 others(int index) const;
  void set_others(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_others(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      others() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_others();

  // repeated int32 pros = 3;
  int pros_size() const;
  private:
  int _internal_pros_size() const;
  public:
  void clear_pros();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pros(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pros() const;
  void _internal_add_pros(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pros();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pros(int index) const;
  void set_pros(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pros(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pros() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pros();

  // int32 roomseatid = 1;
  void clear_roomseatid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomseatid() const;
  void set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomseatid() const;
  void _internal_set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 randomSeed = 4;
  void clear_randomseed();
  ::PROTOBUF_NAMESPACE_ID::int32 randomseed() const;
  void set_randomseed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_randomseed() const;
  void _internal_set_randomseed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SC_JoinRoomMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > others_;
  mutable std::atomic<int> _others_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pros_;
  mutable std::atomic<int> _pros_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomseatid_;
  ::PROTOBUF_NAMESPACE_ID::int32 randomseed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class SC_StartMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SC_StartMsg) */ {
 public:
  inline SC_StartMsg() : SC_StartMsg(nullptr) {};
  virtual ~SC_StartMsg();

  SC_StartMsg(const SC_StartMsg& from);
  SC_StartMsg(SC_StartMsg&& from) noexcept
    : SC_StartMsg() {
    *this = ::std::move(from);
  }

  inline SC_StartMsg& operator=(const SC_StartMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_StartMsg& operator=(SC_StartMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_StartMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_StartMsg* internal_default_instance() {
    return reinterpret_cast<const SC_StartMsg*>(
               &_SC_StartMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_StartMsg& a, SC_StartMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_StartMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_StartMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_StartMsg* New() const final {
    return CreateMaybeMessage<SC_StartMsg>(nullptr);
  }

  SC_StartMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_StartMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_StartMsg& from);
  void MergeFrom(const SC_StartMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_StartMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SC_StartMsg";
  }
  protected:
  explicit SC_StartMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 1,
  };
  // int64 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SC_StartMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class CS_ProgressMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CS_ProgressMsg) */ {
 public:
  inline CS_ProgressMsg() : CS_ProgressMsg(nullptr) {};
  virtual ~CS_ProgressMsg();

  CS_ProgressMsg(const CS_ProgressMsg& from);
  CS_ProgressMsg(CS_ProgressMsg&& from) noexcept
    : CS_ProgressMsg() {
    *this = ::std::move(from);
  }

  inline CS_ProgressMsg& operator=(const CS_ProgressMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ProgressMsg& operator=(CS_ProgressMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ProgressMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ProgressMsg* internal_default_instance() {
    return reinterpret_cast<const CS_ProgressMsg*>(
               &_CS_ProgressMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CS_ProgressMsg& a, CS_ProgressMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ProgressMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ProgressMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ProgressMsg* New() const final {
    return CreateMaybeMessage<CS_ProgressMsg>(nullptr);
  }

  CS_ProgressMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ProgressMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ProgressMsg& from);
  void MergeFrom(const CS_ProgressMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ProgressMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CS_ProgressMsg";
  }
  protected:
  explicit CS_ProgressMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProFieldNumber = 1,
  };
  // int32 pro = 1;
  void clear_pro();
  ::PROTOBUF_NAMESPACE_ID::int32 pro() const;
  void set_pro(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pro() const;
  void _internal_set_pro(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CS_ProgressMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pro_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class SC_ProgressMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SC_ProgressMsg) */ {
 public:
  inline SC_ProgressMsg() : SC_ProgressMsg(nullptr) {};
  virtual ~SC_ProgressMsg();

  SC_ProgressMsg(const SC_ProgressMsg& from);
  SC_ProgressMsg(SC_ProgressMsg&& from) noexcept
    : SC_ProgressMsg() {
    *this = ::std::move(from);
  }

  inline SC_ProgressMsg& operator=(const SC_ProgressMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ProgressMsg& operator=(SC_ProgressMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_ProgressMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_ProgressMsg* internal_default_instance() {
    return reinterpret_cast<const SC_ProgressMsg*>(
               &_SC_ProgressMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SC_ProgressMsg& a, SC_ProgressMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ProgressMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ProgressMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ProgressMsg* New() const final {
    return CreateMaybeMessage<SC_ProgressMsg>(nullptr);
  }

  SC_ProgressMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ProgressMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ProgressMsg& from);
  void MergeFrom(const SC_ProgressMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ProgressMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SC_ProgressMsg";
  }
  protected:
  explicit SC_ProgressMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 pro = 2;
  void clear_pro();
  ::PROTOBUF_NAMESPACE_ID::int32 pro() const;
  void set_pro(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pro() const;
  void _internal_set_pro(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SC_ProgressMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pro_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class CS_InputMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CS_InputMsg) */ {
 public:
  inline CS_InputMsg() : CS_InputMsg(nullptr) {};
  virtual ~CS_InputMsg();

  CS_InputMsg(const CS_InputMsg& from);
  CS_InputMsg(CS_InputMsg&& from) noexcept
    : CS_InputMsg() {
    *this = ::std::move(from);
  }

  inline CS_InputMsg& operator=(const CS_InputMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_InputMsg& operator=(CS_InputMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_InputMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_InputMsg* internal_default_instance() {
    return reinterpret_cast<const CS_InputMsg*>(
               &_CS_InputMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CS_InputMsg& a, CS_InputMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_InputMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_InputMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_InputMsg* New() const final {
    return CreateMaybeMessage<CS_InputMsg>(nullptr);
  }

  CS_InputMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_InputMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_InputMsg& from);
  void MergeFrom(const CS_InputMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_InputMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CS_InputMsg";
  }
  protected:
  explicit CS_InputMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kFrameIDFieldNumber = 4,
  };
  // int32 sid = 1;
  void clear_sid();
  ::PROTOBUF_NAMESPACE_ID::int32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sid() const;
  void _internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 2;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 3;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 frameID = 4;
  void clear_frameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid() const;
  void set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frameid() const;
  void _internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CS_InputMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class InputData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.InputData) */ {
 public:
  inline InputData() : InputData(nullptr) {};
  virtual ~InputData();

  InputData(const InputData& from);
  InputData(InputData&& from) noexcept
    : InputData() {
    *this = ::std::move(from);
  }

  inline InputData& operator=(const InputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputData& operator=(InputData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputData* internal_default_instance() {
    return reinterpret_cast<const InputData*>(
               &_InputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InputData& a, InputData& b) {
    a.Swap(&b);
  }
  inline void Swap(InputData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputData* New() const final {
    return CreateMaybeMessage<InputData>(nullptr);
  }

  InputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputData& from);
  void MergeFrom(const InputData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.InputData";
  }
  protected:
  explicit InputData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSidFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kRoomseatidFieldNumber = 5,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 sid = 2;
  void clear_sid();
  ::PROTOBUF_NAMESPACE_ID::int32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sid() const;
  void _internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 3;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 4;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 roomseatid = 5;
  void clear_roomseatid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomseatid() const;
  void set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomseatid() const;
  void _internal_set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.InputData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomseatid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class FrameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FrameData) */ {
 public:
  inline FrameData() : FrameData(nullptr) {};
  virtual ~FrameData();

  FrameData(const FrameData& from);
  FrameData(FrameData&& from) noexcept
    : FrameData() {
    *this = ::std::move(from);
  }

  inline FrameData& operator=(const FrameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameData& operator=(FrameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameData* internal_default_instance() {
    return reinterpret_cast<const FrameData*>(
               &_FrameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FrameData& a, FrameData& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameData* New() const final {
    return CreateMaybeMessage<FrameData>(nullptr);
  }

  FrameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameData& from);
  void MergeFrom(const FrameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FrameData";
  }
  protected:
  explicit FrameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 2,
    kFrameIDFieldNumber = 1,
  };
  // repeated .proto.InputData input = 2;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::proto::InputData* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::InputData >*
      mutable_input();
  private:
  const ::proto::InputData& _internal_input(int index) const;
  ::proto::InputData* _internal_add_input();
  public:
  const ::proto::InputData& input(int index) const;
  ::proto::InputData* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::InputData >&
      input() const;

  // uint32 frameID = 1;
  void clear_frameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid() const;
  void set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frameid() const;
  void _internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.FrameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::InputData > input_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class SC_FrameMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SC_FrameMsg) */ {
 public:
  inline SC_FrameMsg() : SC_FrameMsg(nullptr) {};
  virtual ~SC_FrameMsg();

  SC_FrameMsg(const SC_FrameMsg& from);
  SC_FrameMsg(SC_FrameMsg&& from) noexcept
    : SC_FrameMsg() {
    *this = ::std::move(from);
  }

  inline SC_FrameMsg& operator=(const SC_FrameMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_FrameMsg& operator=(SC_FrameMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_FrameMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_FrameMsg* internal_default_instance() {
    return reinterpret_cast<const SC_FrameMsg*>(
               &_SC_FrameMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SC_FrameMsg& a, SC_FrameMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_FrameMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_FrameMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_FrameMsg* New() const final {
    return CreateMaybeMessage<SC_FrameMsg>(nullptr);
  }

  SC_FrameMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_FrameMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_FrameMsg& from);
  void MergeFrom(const SC_FrameMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_FrameMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SC_FrameMsg";
  }
  protected:
  explicit SC_FrameMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .proto.FrameData frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::proto::FrameData* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FrameData >*
      mutable_frames();
  private:
  const ::proto::FrameData& _internal_frames(int index) const;
  ::proto::FrameData* _internal_add_frames();
  public:
  const ::proto::FrameData& frames(int index) const;
  ::proto::FrameData* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FrameData >&
      frames() const;

  // @@protoc_insertion_point(class_scope:proto.SC_FrameMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FrameData > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// -------------------------------------------------------------------

class CS_ResultMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CS_ResultMsg) */ {
 public:
  inline CS_ResultMsg() : CS_ResultMsg(nullptr) {};
  virtual ~CS_ResultMsg();

  CS_ResultMsg(const CS_ResultMsg& from);
  CS_ResultMsg(CS_ResultMsg&& from) noexcept
    : CS_ResultMsg() {
    *this = ::std::move(from);
  }

  inline CS_ResultMsg& operator=(const CS_ResultMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ResultMsg& operator=(CS_ResultMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_ResultMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_ResultMsg* internal_default_instance() {
    return reinterpret_cast<const CS_ResultMsg*>(
               &_CS_ResultMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CS_ResultMsg& a, CS_ResultMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ResultMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ResultMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ResultMsg* New() const final {
    return CreateMaybeMessage<CS_ResultMsg>(nullptr);
  }

  CS_ResultMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ResultMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ResultMsg& from);
  void MergeFrom(const CS_ResultMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ResultMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CS_ResultMsg";
  }
  protected:
  explicit CS_ResultMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fframe_5finput_2eproto);
    return ::descriptor_table_proto_2fframe_5finput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinnerIDFieldNumber = 1,
  };
  // uint64 winnerID = 1;
  void clear_winnerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 winnerid() const;
  void set_winnerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_winnerid() const;
  void _internal_set_winnerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CS_ResultMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 winnerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fframe_5finput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CS_ConnectMsg

// uint64 playerID = 1;
inline void CS_ConnectMsg::clear_playerid() {
  playerid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ConnectMsg::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ConnectMsg::playerid() const {
  // @@protoc_insertion_point(field_get:proto.CS_ConnectMsg.playerID)
  return _internal_playerid();
}
inline void CS_ConnectMsg::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void CS_ConnectMsg::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:proto.CS_ConnectMsg.playerID)
}

// uint64 battleID = 2;
inline void CS_ConnectMsg::clear_battleid() {
  battleid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ConnectMsg::_internal_battleid() const {
  return battleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ConnectMsg::battleid() const {
  // @@protoc_insertion_point(field_get:proto.CS_ConnectMsg.battleID)
  return _internal_battleid();
}
inline void CS_ConnectMsg::_internal_set_battleid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  battleid_ = value;
}
inline void CS_ConnectMsg::set_battleid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_battleid(value);
  // @@protoc_insertion_point(field_set:proto.CS_ConnectMsg.battleID)
}

// string token = 3;
inline void CS_ConnectMsg::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CS_ConnectMsg::token() const {
  // @@protoc_insertion_point(field_get:proto.CS_ConnectMsg.token)
  return _internal_token();
}
inline void CS_ConnectMsg::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:proto.CS_ConnectMsg.token)
}
inline std::string* CS_ConnectMsg::mutable_token() {
  // @@protoc_insertion_point(field_mutable:proto.CS_ConnectMsg.token)
  return _internal_mutable_token();
}
inline const std::string& CS_ConnectMsg::_internal_token() const {
  return token_.Get();
}
inline void CS_ConnectMsg::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CS_ConnectMsg::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.CS_ConnectMsg.token)
}
inline void CS_ConnectMsg::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.CS_ConnectMsg.token)
}
inline void CS_ConnectMsg::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.CS_ConnectMsg.token)
}
inline std::string* CS_ConnectMsg::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CS_ConnectMsg::release_token() {
  // @@protoc_insertion_point(field_release:proto.CS_ConnectMsg.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CS_ConnectMsg::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.CS_ConnectMsg.token)
}
inline std::string* CS_ConnectMsg::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CS_ConnectMsg.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CS_ConnectMsg::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CS_ConnectMsg.token)
}

// -------------------------------------------------------------------

// SC_ConnectMsg

// int32 errorCode = 1;
inline void SC_ConnectMsg::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_ConnectMsg::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_ConnectMsg::errorcode() const {
  // @@protoc_insertion_point(field_get:proto.SC_ConnectMsg.errorCode)
  return _internal_errorcode();
}
inline void SC_ConnectMsg::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void SC_ConnectMsg::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:proto.SC_ConnectMsg.errorCode)
}

// -------------------------------------------------------------------

// SC_JoinRoomMsg

// int32 roomseatid = 1;
inline void SC_JoinRoomMsg::clear_roomseatid() {
  roomseatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_JoinRoomMsg::_internal_roomseatid() const {
  return roomseatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_JoinRoomMsg::roomseatid() const {
  // @@protoc_insertion_point(field_get:proto.SC_JoinRoomMsg.roomseatid)
  return _internal_roomseatid();
}
inline void SC_JoinRoomMsg::_internal_set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomseatid_ = value;
}
inline void SC_JoinRoomMsg::set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomseatid(value);
  // @@protoc_insertion_point(field_set:proto.SC_JoinRoomMsg.roomseatid)
}

// repeated uint64 others = 2;
inline int SC_JoinRoomMsg::_internal_others_size() const {
  return others_.size();
}
inline int SC_JoinRoomMsg::others_size() const {
  return _internal_others_size();
}
inline void SC_JoinRoomMsg::clear_others() {
  others_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_JoinRoomMsg::_internal_others(int index) const {
  return others_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_JoinRoomMsg::others(int index) const {
  // @@protoc_insertion_point(field_get:proto.SC_JoinRoomMsg.others)
  return _internal_others(index);
}
inline void SC_JoinRoomMsg::set_others(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  others_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SC_JoinRoomMsg.others)
}
inline void SC_JoinRoomMsg::_internal_add_others(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  others_.Add(value);
}
inline void SC_JoinRoomMsg::add_others(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_others(value);
  // @@protoc_insertion_point(field_add:proto.SC_JoinRoomMsg.others)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SC_JoinRoomMsg::_internal_others() const {
  return others_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SC_JoinRoomMsg::others() const {
  // @@protoc_insertion_point(field_list:proto.SC_JoinRoomMsg.others)
  return _internal_others();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SC_JoinRoomMsg::_internal_mutable_others() {
  return &others_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SC_JoinRoomMsg::mutable_others() {
  // @@protoc_insertion_point(field_mutable_list:proto.SC_JoinRoomMsg.others)
  return _internal_mutable_others();
}

// repeated int32 pros = 3;
inline int SC_JoinRoomMsg::_internal_pros_size() const {
  return pros_.size();
}
inline int SC_JoinRoomMsg::pros_size() const {
  return _internal_pros_size();
}
inline void SC_JoinRoomMsg::clear_pros() {
  pros_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_JoinRoomMsg::_internal_pros(int index) const {
  return pros_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_JoinRoomMsg::pros(int index) const {
  // @@protoc_insertion_point(field_get:proto.SC_JoinRoomMsg.pros)
  return _internal_pros(index);
}
inline void SC_JoinRoomMsg::set_pros(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pros_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SC_JoinRoomMsg.pros)
}
inline void SC_JoinRoomMsg::_internal_add_pros(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pros_.Add(value);
}
inline void SC_JoinRoomMsg::add_pros(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pros(value);
  // @@protoc_insertion_point(field_add:proto.SC_JoinRoomMsg.pros)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_JoinRoomMsg::_internal_pros() const {
  return pros_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SC_JoinRoomMsg::pros() const {
  // @@protoc_insertion_point(field_list:proto.SC_JoinRoomMsg.pros)
  return _internal_pros();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_JoinRoomMsg::_internal_mutable_pros() {
  return &pros_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SC_JoinRoomMsg::mutable_pros() {
  // @@protoc_insertion_point(field_mutable_list:proto.SC_JoinRoomMsg.pros)
  return _internal_mutable_pros();
}

// int32 randomSeed = 4;
inline void SC_JoinRoomMsg::clear_randomseed() {
  randomseed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_JoinRoomMsg::_internal_randomseed() const {
  return randomseed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_JoinRoomMsg::randomseed() const {
  // @@protoc_insertion_point(field_get:proto.SC_JoinRoomMsg.randomSeed)
  return _internal_randomseed();
}
inline void SC_JoinRoomMsg::_internal_set_randomseed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  randomseed_ = value;
}
inline void SC_JoinRoomMsg::set_randomseed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_randomseed(value);
  // @@protoc_insertion_point(field_set:proto.SC_JoinRoomMsg.randomSeed)
}

// -------------------------------------------------------------------

// SC_StartMsg

// int64 timeStamp = 1;
inline void SC_StartMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_StartMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SC_StartMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.SC_StartMsg.timeStamp)
  return _internal_timestamp();
}
inline void SC_StartMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void SC_StartMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.SC_StartMsg.timeStamp)
}

// -------------------------------------------------------------------

// CS_ProgressMsg

// int32 pro = 1;
inline void CS_ProgressMsg::clear_pro() {
  pro_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_ProgressMsg::_internal_pro() const {
  return pro_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_ProgressMsg::pro() const {
  // @@protoc_insertion_point(field_get:proto.CS_ProgressMsg.pro)
  return _internal_pro();
}
inline void CS_ProgressMsg::_internal_set_pro(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pro_ = value;
}
inline void CS_ProgressMsg::set_pro(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pro(value);
  // @@protoc_insertion_point(field_set:proto.CS_ProgressMsg.pro)
}

// -------------------------------------------------------------------

// SC_ProgressMsg

// uint64 id = 1;
inline void SC_ProgressMsg::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ProgressMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_ProgressMsg::id() const {
  // @@protoc_insertion_point(field_get:proto.SC_ProgressMsg.id)
  return _internal_id();
}
inline void SC_ProgressMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void SC_ProgressMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.SC_ProgressMsg.id)
}

// int32 pro = 2;
inline void SC_ProgressMsg::clear_pro() {
  pro_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_ProgressMsg::_internal_pro() const {
  return pro_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SC_ProgressMsg::pro() const {
  // @@protoc_insertion_point(field_get:proto.SC_ProgressMsg.pro)
  return _internal_pro();
}
inline void SC_ProgressMsg::_internal_set_pro(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pro_ = value;
}
inline void SC_ProgressMsg::set_pro(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pro(value);
  // @@protoc_insertion_point(field_set:proto.SC_ProgressMsg.pro)
}

// -------------------------------------------------------------------

// CS_InputMsg

// int32 sid = 1;
inline void CS_InputMsg::clear_sid() {
  sid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_InputMsg::_internal_sid() const {
  return sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_InputMsg::sid() const {
  // @@protoc_insertion_point(field_get:proto.CS_InputMsg.sid)
  return _internal_sid();
}
inline void CS_InputMsg::_internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sid_ = value;
}
inline void CS_InputMsg::set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:proto.CS_InputMsg.sid)
}

// int32 x = 2;
inline void CS_InputMsg::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_InputMsg::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_InputMsg::x() const {
  // @@protoc_insertion_point(field_get:proto.CS_InputMsg.x)
  return _internal_x();
}
inline void CS_InputMsg::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void CS_InputMsg::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.CS_InputMsg.x)
}

// int32 y = 3;
inline void CS_InputMsg::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_InputMsg::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CS_InputMsg::y() const {
  // @@protoc_insertion_point(field_get:proto.CS_InputMsg.y)
  return _internal_y();
}
inline void CS_InputMsg::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void CS_InputMsg::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.CS_InputMsg.y)
}

// uint32 frameID = 4;
inline void CS_InputMsg::clear_frameid() {
  frameid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_InputMsg::_internal_frameid() const {
  return frameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_InputMsg::frameid() const {
  // @@protoc_insertion_point(field_get:proto.CS_InputMsg.frameID)
  return _internal_frameid();
}
inline void CS_InputMsg::_internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frameid_ = value;
}
inline void CS_InputMsg::set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:proto.CS_InputMsg.frameID)
}

// -------------------------------------------------------------------

// InputData

// uint64 id = 1;
inline void InputData::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputData::id() const {
  // @@protoc_insertion_point(field_get:proto.InputData.id)
  return _internal_id();
}
inline void InputData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void InputData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.InputData.id)
}

// int32 sid = 2;
inline void InputData::clear_sid() {
  sid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::_internal_sid() const {
  return sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::sid() const {
  // @@protoc_insertion_point(field_get:proto.InputData.sid)
  return _internal_sid();
}
inline void InputData::_internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sid_ = value;
}
inline void InputData::set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:proto.InputData.sid)
}

// int32 x = 3;
inline void InputData::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::x() const {
  // @@protoc_insertion_point(field_get:proto.InputData.x)
  return _internal_x();
}
inline void InputData::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void InputData::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.InputData.x)
}

// int32 y = 4;
inline void InputData::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::y() const {
  // @@protoc_insertion_point(field_get:proto.InputData.y)
  return _internal_y();
}
inline void InputData::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void InputData::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.InputData.y)
}

// int32 roomseatid = 5;
inline void InputData::clear_roomseatid() {
  roomseatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::_internal_roomseatid() const {
  return roomseatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputData::roomseatid() const {
  // @@protoc_insertion_point(field_get:proto.InputData.roomseatid)
  return _internal_roomseatid();
}
inline void InputData::_internal_set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomseatid_ = value;
}
inline void InputData::set_roomseatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomseatid(value);
  // @@protoc_insertion_point(field_set:proto.InputData.roomseatid)
}

// -------------------------------------------------------------------

// FrameData

// uint32 frameID = 1;
inline void FrameData::clear_frameid() {
  frameid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameData::_internal_frameid() const {
  return frameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameData::frameid() const {
  // @@protoc_insertion_point(field_get:proto.FrameData.frameID)
  return _internal_frameid();
}
inline void FrameData::_internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frameid_ = value;
}
inline void FrameData::set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:proto.FrameData.frameID)
}

// repeated .proto.InputData input = 2;
inline int FrameData::_internal_input_size() const {
  return input_.size();
}
inline int FrameData::input_size() const {
  return _internal_input_size();
}
inline void FrameData::clear_input() {
  input_.Clear();
}
inline ::proto::InputData* FrameData::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FrameData.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::InputData >*
FrameData::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:proto.FrameData.input)
  return &input_;
}
inline const ::proto::InputData& FrameData::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::proto::InputData& FrameData::input(int index) const {
  // @@protoc_insertion_point(field_get:proto.FrameData.input)
  return _internal_input(index);
}
inline ::proto::InputData* FrameData::_internal_add_input() {
  return input_.Add();
}
inline ::proto::InputData* FrameData::add_input() {
  // @@protoc_insertion_point(field_add:proto.FrameData.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::InputData >&
FrameData::input() const {
  // @@protoc_insertion_point(field_list:proto.FrameData.input)
  return input_;
}

// -------------------------------------------------------------------

// SC_FrameMsg

// repeated .proto.FrameData frames = 1;
inline int SC_FrameMsg::_internal_frames_size() const {
  return frames_.size();
}
inline int SC_FrameMsg::frames_size() const {
  return _internal_frames_size();
}
inline void SC_FrameMsg::clear_frames() {
  frames_.Clear();
}
inline ::proto::FrameData* SC_FrameMsg::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SC_FrameMsg.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FrameData >*
SC_FrameMsg::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:proto.SC_FrameMsg.frames)
  return &frames_;
}
inline const ::proto::FrameData& SC_FrameMsg::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::proto::FrameData& SC_FrameMsg::frames(int index) const {
  // @@protoc_insertion_point(field_get:proto.SC_FrameMsg.frames)
  return _internal_frames(index);
}
inline ::proto::FrameData* SC_FrameMsg::_internal_add_frames() {
  return frames_.Add();
}
inline ::proto::FrameData* SC_FrameMsg::add_frames() {
  // @@protoc_insertion_point(field_add:proto.SC_FrameMsg.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FrameData >&
SC_FrameMsg::frames() const {
  // @@protoc_insertion_point(field_list:proto.SC_FrameMsg.frames)
  return frames_;
}

// -------------------------------------------------------------------

// CS_ResultMsg

// uint64 winnerID = 1;
inline void CS_ResultMsg::clear_winnerid() {
  winnerid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ResultMsg::_internal_winnerid() const {
  return winnerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ResultMsg::winnerid() const {
  // @@protoc_insertion_point(field_get:proto.CS_ResultMsg.winnerID)
  return _internal_winnerid();
}
inline void CS_ResultMsg::_internal_set_winnerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  winnerid_ = value;
}
inline void CS_ResultMsg::set_winnerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_winnerid(value);
  // @@protoc_insertion_point(field_set:proto.CS_ResultMsg.winnerID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fframe_5finput_2eproto
