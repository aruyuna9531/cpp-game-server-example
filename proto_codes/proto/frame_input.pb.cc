// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/frame_input.proto

#include "proto/frame_input.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fframe_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameData_proto_2fframe_5finput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fframe_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputData_proto_2fframe_5finput_2eproto;
namespace proto {
class CS_ConnectMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ConnectMsg> _instance;
} _CS_ConnectMsg_default_instance_;
class SC_ConnectMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ConnectMsg> _instance;
} _SC_ConnectMsg_default_instance_;
class SC_JoinRoomMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_JoinRoomMsg> _instance;
} _SC_JoinRoomMsg_default_instance_;
class SC_StartMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_StartMsg> _instance;
} _SC_StartMsg_default_instance_;
class CS_ProgressMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ProgressMsg> _instance;
} _CS_ProgressMsg_default_instance_;
class SC_ProgressMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_ProgressMsg> _instance;
} _SC_ProgressMsg_default_instance_;
class CS_InputMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_InputMsg> _instance;
} _CS_InputMsg_default_instance_;
class InputDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputData> _instance;
} _InputData_default_instance_;
class FrameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameData> _instance;
} _FrameData_default_instance_;
class SC_FrameMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SC_FrameMsg> _instance;
} _SC_FrameMsg_default_instance_;
class CS_ResultMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CS_ResultMsg> _instance;
} _CS_ResultMsg_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_CS_ConnectMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_CS_ConnectMsg_default_instance_;
    new (ptr) ::proto::CS_ConnectMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::CS_ConnectMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ConnectMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ConnectMsg_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_CS_InputMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_CS_InputMsg_default_instance_;
    new (ptr) ::proto::CS_InputMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::CS_InputMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_InputMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_InputMsg_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_CS_ProgressMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_CS_ProgressMsg_default_instance_;
    new (ptr) ::proto::CS_ProgressMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::CS_ProgressMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ProgressMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ProgressMsg_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_CS_ResultMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_CS_ResultMsg_default_instance_;
    new (ptr) ::proto::CS_ResultMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::CS_ResultMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CS_ResultMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CS_ResultMsg_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_FrameData_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_FrameData_default_instance_;
    new (ptr) ::proto::FrameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::FrameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameData_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameData_proto_2fframe_5finput_2eproto}, {
      &scc_info_InputData_proto_2fframe_5finput_2eproto.base,}};

static void InitDefaultsscc_info_InputData_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_InputData_default_instance_;
    new (ptr) ::proto::InputData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::InputData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputData_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputData_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_SC_ConnectMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SC_ConnectMsg_default_instance_;
    new (ptr) ::proto::SC_ConnectMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SC_ConnectMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ConnectMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ConnectMsg_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_SC_FrameMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SC_FrameMsg_default_instance_;
    new (ptr) ::proto::SC_FrameMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SC_FrameMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SC_FrameMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SC_FrameMsg_proto_2fframe_5finput_2eproto}, {
      &scc_info_FrameData_proto_2fframe_5finput_2eproto.base,}};

static void InitDefaultsscc_info_SC_JoinRoomMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SC_JoinRoomMsg_default_instance_;
    new (ptr) ::proto::SC_JoinRoomMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SC_JoinRoomMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_JoinRoomMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_JoinRoomMsg_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_SC_ProgressMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SC_ProgressMsg_default_instance_;
    new (ptr) ::proto::SC_ProgressMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SC_ProgressMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_ProgressMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_ProgressMsg_proto_2fframe_5finput_2eproto}, {}};

static void InitDefaultsscc_info_SC_StartMsg_proto_2fframe_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SC_StartMsg_default_instance_;
    new (ptr) ::proto::SC_StartMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SC_StartMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SC_StartMsg_proto_2fframe_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SC_StartMsg_proto_2fframe_5finput_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fframe_5finput_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fframe_5finput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fframe_5finput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fframe_5finput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CS_ConnectMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::CS_ConnectMsg, playerid_),
  PROTOBUF_FIELD_OFFSET(::proto::CS_ConnectMsg, battleid_),
  PROTOBUF_FIELD_OFFSET(::proto::CS_ConnectMsg, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SC_ConnectMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::SC_ConnectMsg, errorcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SC_JoinRoomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::SC_JoinRoomMsg, roomseatid_),
  PROTOBUF_FIELD_OFFSET(::proto::SC_JoinRoomMsg, others_),
  PROTOBUF_FIELD_OFFSET(::proto::SC_JoinRoomMsg, pros_),
  PROTOBUF_FIELD_OFFSET(::proto::SC_JoinRoomMsg, randomseed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SC_StartMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::SC_StartMsg, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CS_ProgressMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::CS_ProgressMsg, pro_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SC_ProgressMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::SC_ProgressMsg, id_),
  PROTOBUF_FIELD_OFFSET(::proto::SC_ProgressMsg, pro_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CS_InputMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::CS_InputMsg, sid_),
  PROTOBUF_FIELD_OFFSET(::proto::CS_InputMsg, x_),
  PROTOBUF_FIELD_OFFSET(::proto::CS_InputMsg, y_),
  PROTOBUF_FIELD_OFFSET(::proto::CS_InputMsg, frameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::InputData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::InputData, id_),
  PROTOBUF_FIELD_OFFSET(::proto::InputData, sid_),
  PROTOBUF_FIELD_OFFSET(::proto::InputData, x_),
  PROTOBUF_FIELD_OFFSET(::proto::InputData, y_),
  PROTOBUF_FIELD_OFFSET(::proto::InputData, roomseatid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FrameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::FrameData, frameid_),
  PROTOBUF_FIELD_OFFSET(::proto::FrameData, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SC_FrameMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::SC_FrameMsg, frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CS_ResultMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::CS_ResultMsg, winnerid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::CS_ConnectMsg)},
  { 8, -1, sizeof(::proto::SC_ConnectMsg)},
  { 14, -1, sizeof(::proto::SC_JoinRoomMsg)},
  { 23, -1, sizeof(::proto::SC_StartMsg)},
  { 29, -1, sizeof(::proto::CS_ProgressMsg)},
  { 35, -1, sizeof(::proto::SC_ProgressMsg)},
  { 42, -1, sizeof(::proto::CS_InputMsg)},
  { 51, -1, sizeof(::proto::InputData)},
  { 61, -1, sizeof(::proto::FrameData)},
  { 68, -1, sizeof(::proto::SC_FrameMsg)},
  { 74, -1, sizeof(::proto::CS_ResultMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_CS_ConnectMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SC_ConnectMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SC_JoinRoomMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SC_StartMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_CS_ProgressMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SC_ProgressMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_CS_InputMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_InputData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_FrameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SC_FrameMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_CS_ResultMsg_default_instance_),
};

const char descriptor_table_protodef_proto_2fframe_5finput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027proto/frame_input.proto\022\005proto\"B\n\rCS_C"
  "onnectMsg\022\020\n\010playerID\030\001 \001(\004\022\020\n\010battleID\030"
  "\002 \001(\004\022\r\n\005token\030\003 \001(\t\"\"\n\rSC_ConnectMsg\022\021\n"
  "\terrorCode\030\001 \001(\005\"V\n\016SC_JoinRoomMsg\022\022\n\nro"
  "omseatid\030\001 \001(\005\022\016\n\006others\030\002 \003(\004\022\014\n\004pros\030\003"
  " \003(\005\022\022\n\nrandomSeed\030\004 \001(\005\" \n\013SC_StartMsg\022"
  "\021\n\ttimeStamp\030\001 \001(\003\"\035\n\016CS_ProgressMsg\022\013\n\003"
  "pro\030\001 \001(\005\")\n\016SC_ProgressMsg\022\n\n\002id\030\001 \001(\004\022"
  "\013\n\003pro\030\002 \001(\005\"A\n\013CS_InputMsg\022\013\n\003sid\030\001 \001(\005"
  "\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\017\n\007frameID\030\004 \001(\r\""
  "N\n\tInputData\022\n\n\002id\030\001 \001(\004\022\013\n\003sid\030\002 \001(\005\022\t\n"
  "\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\022\n\nroomseatid\030\005 \001(\005\""
  "=\n\tFrameData\022\017\n\007frameID\030\001 \001(\r\022\037\n\005input\030\002"
  " \003(\0132\020.proto.InputData\"/\n\013SC_FrameMsg\022 \n"
  "\006frames\030\001 \003(\0132\020.proto.FrameData\" \n\014CS_Re"
  "sultMsg\022\020\n\010winnerID\030\001 \001(\004B\rZ\013proto_codes"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fframe_5finput_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fframe_5finput_2eproto_sccs[11] = {
  &scc_info_CS_ConnectMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_CS_InputMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_CS_ProgressMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_CS_ResultMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_FrameData_proto_2fframe_5finput_2eproto.base,
  &scc_info_InputData_proto_2fframe_5finput_2eproto.base,
  &scc_info_SC_ConnectMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_SC_FrameMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_SC_JoinRoomMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_SC_ProgressMsg_proto_2fframe_5finput_2eproto.base,
  &scc_info_SC_StartMsg_proto_2fframe_5finput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fframe_5finput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fframe_5finput_2eproto = {
  false, false, descriptor_table_protodef_proto_2fframe_5finput_2eproto, "proto/frame_input.proto", 648,
  &descriptor_table_proto_2fframe_5finput_2eproto_once, descriptor_table_proto_2fframe_5finput_2eproto_sccs, descriptor_table_proto_2fframe_5finput_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_proto_2fframe_5finput_2eproto::offsets,
  file_level_metadata_proto_2fframe_5finput_2eproto, 11, file_level_enum_descriptors_proto_2fframe_5finput_2eproto, file_level_service_descriptors_proto_2fframe_5finput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fframe_5finput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fframe_5finput_2eproto)), true);
namespace proto {

// ===================================================================

void CS_ConnectMsg::InitAsDefaultInstance() {
}
class CS_ConnectMsg::_Internal {
 public:
};

CS_ConnectMsg::CS_ConnectMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.CS_ConnectMsg)
}
CS_ConnectMsg::CS_ConnectMsg(const CS_ConnectMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&battleid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(battleid_));
  // @@protoc_insertion_point(copy_constructor:proto.CS_ConnectMsg)
}

void CS_ConnectMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CS_ConnectMsg_proto_2fframe_5finput_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battleid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(battleid_));
}

CS_ConnectMsg::~CS_ConnectMsg() {
  // @@protoc_insertion_point(destructor:proto.CS_ConnectMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CS_ConnectMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CS_ConnectMsg::ArenaDtor(void* object) {
  CS_ConnectMsg* _this = reinterpret_cast< CS_ConnectMsg* >(object);
  (void)_this;
}
void CS_ConnectMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CS_ConnectMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ConnectMsg& CS_ConnectMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ConnectMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void CS_ConnectMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CS_ConnectMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battleid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(battleid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_ConnectMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 battleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          battleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.CS_ConnectMsg.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ConnectMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CS_ConnectMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // uint64 battleID = 2;
  if (this->battleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_battleid(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.CS_ConnectMsg.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CS_ConnectMsg)
  return target;
}

size_t CS_ConnectMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CS_ConnectMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  // uint64 battleID = 2;
  if (this->battleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_battleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ConnectMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CS_ConnectMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ConnectMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ConnectMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CS_ConnectMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CS_ConnectMsg)
    MergeFrom(*source);
  }
}

void CS_ConnectMsg::MergeFrom(const CS_ConnectMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CS_ConnectMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.battleid() != 0) {
    _internal_set_battleid(from._internal_battleid());
  }
}

void CS_ConnectMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CS_ConnectMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ConnectMsg::CopyFrom(const CS_ConnectMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CS_ConnectMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ConnectMsg::IsInitialized() const {
  return true;
}

void CS_ConnectMsg::InternalSwap(CS_ConnectMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_ConnectMsg, battleid_)
      + sizeof(CS_ConnectMsg::battleid_)
      - PROTOBUF_FIELD_OFFSET(CS_ConnectMsg, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ConnectMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ConnectMsg::InitAsDefaultInstance() {
}
class SC_ConnectMsg::_Internal {
 public:
};

SC_ConnectMsg::SC_ConnectMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.SC_ConnectMsg)
}
SC_ConnectMsg::SC_ConnectMsg(const SC_ConnectMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:proto.SC_ConnectMsg)
}

void SC_ConnectMsg::SharedCtor() {
  errorcode_ = 0;
}

SC_ConnectMsg::~SC_ConnectMsg() {
  // @@protoc_insertion_point(destructor:proto.SC_ConnectMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_ConnectMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_ConnectMsg::ArenaDtor(void* object) {
  SC_ConnectMsg* _this = reinterpret_cast< SC_ConnectMsg* >(object);
  (void)_this;
}
void SC_ConnectMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_ConnectMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ConnectMsg& SC_ConnectMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ConnectMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void SC_ConnectMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SC_ConnectMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ConnectMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ConnectMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SC_ConnectMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorCode = 1;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SC_ConnectMsg)
  return target;
}

size_t SC_ConnectMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SC_ConnectMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 errorCode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ConnectMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SC_ConnectMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ConnectMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ConnectMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SC_ConnectMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SC_ConnectMsg)
    MergeFrom(*source);
  }
}

void SC_ConnectMsg::MergeFrom(const SC_ConnectMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SC_ConnectMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void SC_ConnectMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SC_ConnectMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ConnectMsg::CopyFrom(const SC_ConnectMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SC_ConnectMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ConnectMsg::IsInitialized() const {
  return true;
}

void SC_ConnectMsg::InternalSwap(SC_ConnectMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ConnectMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_JoinRoomMsg::InitAsDefaultInstance() {
}
class SC_JoinRoomMsg::_Internal {
 public:
};

SC_JoinRoomMsg::SC_JoinRoomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  others_(arena),
  pros_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.SC_JoinRoomMsg)
}
SC_JoinRoomMsg::SC_JoinRoomMsg(const SC_JoinRoomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      others_(from.others_),
      pros_(from.pros_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomseatid_, &from.roomseatid_,
    static_cast<size_t>(reinterpret_cast<char*>(&randomseed_) -
    reinterpret_cast<char*>(&roomseatid_)) + sizeof(randomseed_));
  // @@protoc_insertion_point(copy_constructor:proto.SC_JoinRoomMsg)
}

void SC_JoinRoomMsg::SharedCtor() {
  ::memset(&roomseatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&randomseed_) -
      reinterpret_cast<char*>(&roomseatid_)) + sizeof(randomseed_));
}

SC_JoinRoomMsg::~SC_JoinRoomMsg() {
  // @@protoc_insertion_point(destructor:proto.SC_JoinRoomMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_JoinRoomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_JoinRoomMsg::ArenaDtor(void* object) {
  SC_JoinRoomMsg* _this = reinterpret_cast< SC_JoinRoomMsg* >(object);
  (void)_this;
}
void SC_JoinRoomMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_JoinRoomMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_JoinRoomMsg& SC_JoinRoomMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_JoinRoomMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void SC_JoinRoomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SC_JoinRoomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  others_.Clear();
  pros_.Clear();
  ::memset(&roomseatid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&randomseed_) -
      reinterpret_cast<char*>(&roomseatid_)) + sizeof(randomseed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_JoinRoomMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomseatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomseatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 others = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_others(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_others(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pros(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_pros(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 randomSeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          randomseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_JoinRoomMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SC_JoinRoomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomseatid = 1;
  if (this->roomseatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomseatid(), target);
  }

  // repeated uint64 others = 2;
  {
    int byte_size = _others_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_others(), byte_size, target);
    }
  }

  // repeated int32 pros = 3;
  {
    int byte_size = _pros_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_pros(), byte_size, target);
    }
  }

  // int32 randomSeed = 4;
  if (this->randomseed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_randomseed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SC_JoinRoomMsg)
  return target;
}

size_t SC_JoinRoomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SC_JoinRoomMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 others = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->others_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _others_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pros = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pros_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pros_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 roomseatid = 1;
  if (this->roomseatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomseatid());
  }

  // int32 randomSeed = 4;
  if (this->randomseed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_randomseed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_JoinRoomMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SC_JoinRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_JoinRoomMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_JoinRoomMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SC_JoinRoomMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SC_JoinRoomMsg)
    MergeFrom(*source);
  }
}

void SC_JoinRoomMsg::MergeFrom(const SC_JoinRoomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SC_JoinRoomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  others_.MergeFrom(from.others_);
  pros_.MergeFrom(from.pros_);
  if (from.roomseatid() != 0) {
    _internal_set_roomseatid(from._internal_roomseatid());
  }
  if (from.randomseed() != 0) {
    _internal_set_randomseed(from._internal_randomseed());
  }
}

void SC_JoinRoomMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SC_JoinRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_JoinRoomMsg::CopyFrom(const SC_JoinRoomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SC_JoinRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_JoinRoomMsg::IsInitialized() const {
  return true;
}

void SC_JoinRoomMsg::InternalSwap(SC_JoinRoomMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  others_.InternalSwap(&other->others_);
  pros_.InternalSwap(&other->pros_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_JoinRoomMsg, randomseed_)
      + sizeof(SC_JoinRoomMsg::randomseed_)
      - PROTOBUF_FIELD_OFFSET(SC_JoinRoomMsg, roomseatid_)>(
          reinterpret_cast<char*>(&roomseatid_),
          reinterpret_cast<char*>(&other->roomseatid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_JoinRoomMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_StartMsg::InitAsDefaultInstance() {
}
class SC_StartMsg::_Internal {
 public:
};

SC_StartMsg::SC_StartMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.SC_StartMsg)
}
SC_StartMsg::SC_StartMsg(const SC_StartMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.SC_StartMsg)
}

void SC_StartMsg::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

SC_StartMsg::~SC_StartMsg() {
  // @@protoc_insertion_point(destructor:proto.SC_StartMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_StartMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_StartMsg::ArenaDtor(void* object) {
  SC_StartMsg* _this = reinterpret_cast< SC_StartMsg* >(object);
  (void)_this;
}
void SC_StartMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_StartMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_StartMsg& SC_StartMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_StartMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void SC_StartMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SC_StartMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_StartMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_StartMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SC_StartMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SC_StartMsg)
  return target;
}

size_t SC_StartMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SC_StartMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_StartMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SC_StartMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_StartMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_StartMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SC_StartMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SC_StartMsg)
    MergeFrom(*source);
  }
}

void SC_StartMsg::MergeFrom(const SC_StartMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SC_StartMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SC_StartMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SC_StartMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_StartMsg::CopyFrom(const SC_StartMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SC_StartMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_StartMsg::IsInitialized() const {
  return true;
}

void SC_StartMsg::InternalSwap(SC_StartMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_StartMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ProgressMsg::InitAsDefaultInstance() {
}
class CS_ProgressMsg::_Internal {
 public:
};

CS_ProgressMsg::CS_ProgressMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.CS_ProgressMsg)
}
CS_ProgressMsg::CS_ProgressMsg(const CS_ProgressMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pro_ = from.pro_;
  // @@protoc_insertion_point(copy_constructor:proto.CS_ProgressMsg)
}

void CS_ProgressMsg::SharedCtor() {
  pro_ = 0;
}

CS_ProgressMsg::~CS_ProgressMsg() {
  // @@protoc_insertion_point(destructor:proto.CS_ProgressMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CS_ProgressMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CS_ProgressMsg::ArenaDtor(void* object) {
  CS_ProgressMsg* _this = reinterpret_cast< CS_ProgressMsg* >(object);
  (void)_this;
}
void CS_ProgressMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CS_ProgressMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ProgressMsg& CS_ProgressMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ProgressMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void CS_ProgressMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CS_ProgressMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pro_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_ProgressMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ProgressMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CS_ProgressMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pro = 1;
  if (this->pro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CS_ProgressMsg)
  return target;
}

size_t CS_ProgressMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CS_ProgressMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pro = 1;
  if (this->pro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pro());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ProgressMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CS_ProgressMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ProgressMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ProgressMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CS_ProgressMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CS_ProgressMsg)
    MergeFrom(*source);
  }
}

void CS_ProgressMsg::MergeFrom(const CS_ProgressMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CS_ProgressMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pro() != 0) {
    _internal_set_pro(from._internal_pro());
  }
}

void CS_ProgressMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CS_ProgressMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ProgressMsg::CopyFrom(const CS_ProgressMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CS_ProgressMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ProgressMsg::IsInitialized() const {
  return true;
}

void CS_ProgressMsg::InternalSwap(CS_ProgressMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pro_, other->pro_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ProgressMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_ProgressMsg::InitAsDefaultInstance() {
}
class SC_ProgressMsg::_Internal {
 public:
};

SC_ProgressMsg::SC_ProgressMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.SC_ProgressMsg)
}
SC_ProgressMsg::SC_ProgressMsg(const SC_ProgressMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pro_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pro_));
  // @@protoc_insertion_point(copy_constructor:proto.SC_ProgressMsg)
}

void SC_ProgressMsg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pro_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pro_));
}

SC_ProgressMsg::~SC_ProgressMsg() {
  // @@protoc_insertion_point(destructor:proto.SC_ProgressMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_ProgressMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_ProgressMsg::ArenaDtor(void* object) {
  SC_ProgressMsg* _this = reinterpret_cast< SC_ProgressMsg* >(object);
  (void)_this;
}
void SC_ProgressMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_ProgressMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_ProgressMsg& SC_ProgressMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_ProgressMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void SC_ProgressMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SC_ProgressMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pro_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pro_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ProgressMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pro = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_ProgressMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SC_ProgressMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 pro = 2;
  if (this->pro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SC_ProgressMsg)
  return target;
}

size_t SC_ProgressMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SC_ProgressMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int32 pro = 2;
  if (this->pro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pro());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_ProgressMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SC_ProgressMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_ProgressMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_ProgressMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SC_ProgressMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SC_ProgressMsg)
    MergeFrom(*source);
  }
}

void SC_ProgressMsg::MergeFrom(const SC_ProgressMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SC_ProgressMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pro() != 0) {
    _internal_set_pro(from._internal_pro());
  }
}

void SC_ProgressMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SC_ProgressMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ProgressMsg::CopyFrom(const SC_ProgressMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SC_ProgressMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ProgressMsg::IsInitialized() const {
  return true;
}

void SC_ProgressMsg::InternalSwap(SC_ProgressMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_ProgressMsg, pro_)
      + sizeof(SC_ProgressMsg::pro_)
      - PROTOBUF_FIELD_OFFSET(SC_ProgressMsg, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ProgressMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_InputMsg::InitAsDefaultInstance() {
}
class CS_InputMsg::_Internal {
 public:
};

CS_InputMsg::CS_InputMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.CS_InputMsg)
}
CS_InputMsg::CS_InputMsg(const CS_InputMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&frameid_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(frameid_));
  // @@protoc_insertion_point(copy_constructor:proto.CS_InputMsg)
}

void CS_InputMsg::SharedCtor() {
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frameid_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(frameid_));
}

CS_InputMsg::~CS_InputMsg() {
  // @@protoc_insertion_point(destructor:proto.CS_InputMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CS_InputMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CS_InputMsg::ArenaDtor(void* object) {
  CS_InputMsg* _this = reinterpret_cast< CS_InputMsg* >(object);
  (void)_this;
}
void CS_InputMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CS_InputMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_InputMsg& CS_InputMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_InputMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void CS_InputMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CS_InputMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frameid_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(frameid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_InputMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frameID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_InputMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CS_InputMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sid(), target);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // uint32 frameID = 4;
  if (this->frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CS_InputMsg)
  return target;
}

size_t CS_InputMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CS_InputMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sid());
  }

  // int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // uint32 frameID = 4;
  if (this->frameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_InputMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CS_InputMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_InputMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_InputMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CS_InputMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CS_InputMsg)
    MergeFrom(*source);
  }
}

void CS_InputMsg::MergeFrom(const CS_InputMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CS_InputMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid() != 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
}

void CS_InputMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CS_InputMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_InputMsg::CopyFrom(const CS_InputMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CS_InputMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_InputMsg::IsInitialized() const {
  return true;
}

void CS_InputMsg::InternalSwap(CS_InputMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_InputMsg, frameid_)
      + sizeof(CS_InputMsg::frameid_)
      - PROTOBUF_FIELD_OFFSET(CS_InputMsg, sid_)>(
          reinterpret_cast<char*>(&sid_),
          reinterpret_cast<char*>(&other->sid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_InputMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputData::InitAsDefaultInstance() {
}
class InputData::_Internal {
 public:
};

InputData::InputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.InputData)
}
InputData::InputData(const InputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomseatid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(roomseatid_));
  // @@protoc_insertion_point(copy_constructor:proto.InputData)
}

void InputData::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomseatid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(roomseatid_));
}

InputData::~InputData() {
  // @@protoc_insertion_point(destructor:proto.InputData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InputData::ArenaDtor(void* object) {
  InputData* _this = reinterpret_cast< InputData* >(object);
  (void)_this;
}
void InputData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputData& InputData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputData_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void InputData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomseatid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(roomseatid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 roomseatid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          roomseatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.InputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sid(), target);
  }

  // int32 x = 3;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // int32 roomseatid = 5;
  if (this->roomseatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_roomseatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InputData)
  return target;
}

size_t InputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InputData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sid());
  }

  // int32 x = 3;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 4;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 roomseatid = 5;
  if (this->roomseatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomseatid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InputData)
  GOOGLE_DCHECK_NE(&from, this);
  const InputData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InputData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InputData)
    MergeFrom(*source);
  }
}

void InputData::MergeFrom(const InputData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InputData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sid() != 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.roomseatid() != 0) {
    _internal_set_roomseatid(from._internal_roomseatid());
  }
}

void InputData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputData::CopyFrom(const InputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputData::IsInitialized() const {
  return true;
}

void InputData::InternalSwap(InputData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputData, roomseatid_)
      + sizeof(InputData::roomseatid_)
      - PROTOBUF_FIELD_OFFSET(InputData, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameData::InitAsDefaultInstance() {
}
class FrameData::_Internal {
 public:
};

FrameData::FrameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.FrameData)
}
FrameData::FrameData(const FrameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_(from.input_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frameid_ = from.frameid_;
  // @@protoc_insertion_point(copy_constructor:proto.FrameData)
}

void FrameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameData_proto_2fframe_5finput_2eproto.base);
  frameid_ = 0u;
}

FrameData::~FrameData() {
  // @@protoc_insertion_point(destructor:proto.FrameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameData::ArenaDtor(void* object) {
  FrameData* _this = reinterpret_cast< FrameData* >(object);
  (void)_this;
}
void FrameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameData& FrameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameData_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void FrameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FrameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  frameid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frameID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.InputData input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FrameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frameID = 1;
  if (this->frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated .proto.InputData input = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_input(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FrameData)
  return target;
}

size_t FrameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FrameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.InputData input = 2;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 frameID = 1;
  if (this->frameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FrameData)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FrameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FrameData)
    MergeFrom(*source);
  }
}

void FrameData::MergeFrom(const FrameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FrameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  if (from.frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
}

void FrameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameData::CopyFrom(const FrameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameData::IsInitialized() const {
  return true;
}

void FrameData::InternalSwap(FrameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_.InternalSwap(&other->input_);
  swap(frameid_, other->frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SC_FrameMsg::InitAsDefaultInstance() {
}
class SC_FrameMsg::_Internal {
 public:
};

SC_FrameMsg::SC_FrameMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.SC_FrameMsg)
}
SC_FrameMsg::SC_FrameMsg(const SC_FrameMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SC_FrameMsg)
}

void SC_FrameMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SC_FrameMsg_proto_2fframe_5finput_2eproto.base);
}

SC_FrameMsg::~SC_FrameMsg() {
  // @@protoc_insertion_point(destructor:proto.SC_FrameMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SC_FrameMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SC_FrameMsg::ArenaDtor(void* object) {
  SC_FrameMsg* _this = reinterpret_cast< SC_FrameMsg* >(object);
  (void)_this;
}
void SC_FrameMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SC_FrameMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SC_FrameMsg& SC_FrameMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SC_FrameMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void SC_FrameMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SC_FrameMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_FrameMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto.FrameData frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SC_FrameMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SC_FrameMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.FrameData frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SC_FrameMsg)
  return target;
}

size_t SC_FrameMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SC_FrameMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.FrameData frames = 1;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SC_FrameMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SC_FrameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_FrameMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SC_FrameMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SC_FrameMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SC_FrameMsg)
    MergeFrom(*source);
  }
}

void SC_FrameMsg::MergeFrom(const SC_FrameMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SC_FrameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void SC_FrameMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SC_FrameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FrameMsg::CopyFrom(const SC_FrameMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SC_FrameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FrameMsg::IsInitialized() const {
  return true;
}

void SC_FrameMsg::InternalSwap(SC_FrameMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_FrameMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CS_ResultMsg::InitAsDefaultInstance() {
}
class CS_ResultMsg::_Internal {
 public:
};

CS_ResultMsg::CS_ResultMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.CS_ResultMsg)
}
CS_ResultMsg::CS_ResultMsg(const CS_ResultMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  winnerid_ = from.winnerid_;
  // @@protoc_insertion_point(copy_constructor:proto.CS_ResultMsg)
}

void CS_ResultMsg::SharedCtor() {
  winnerid_ = PROTOBUF_ULONGLONG(0);
}

CS_ResultMsg::~CS_ResultMsg() {
  // @@protoc_insertion_point(destructor:proto.CS_ResultMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CS_ResultMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CS_ResultMsg::ArenaDtor(void* object) {
  CS_ResultMsg* _this = reinterpret_cast< CS_ResultMsg* >(object);
  (void)_this;
}
void CS_ResultMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CS_ResultMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CS_ResultMsg& CS_ResultMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CS_ResultMsg_proto_2fframe_5finput_2eproto.base);
  return *internal_default_instance();
}


void CS_ResultMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CS_ResultMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winnerid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_ResultMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 winnerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          winnerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CS_ResultMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CS_ResultMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 winnerID = 1;
  if (this->winnerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_winnerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CS_ResultMsg)
  return target;
}

size_t CS_ResultMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CS_ResultMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 winnerID = 1;
  if (this->winnerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_winnerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS_ResultMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CS_ResultMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_ResultMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CS_ResultMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CS_ResultMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CS_ResultMsg)
    MergeFrom(*source);
  }
}

void CS_ResultMsg::MergeFrom(const CS_ResultMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CS_ResultMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.winnerid() != 0) {
    _internal_set_winnerid(from._internal_winnerid());
  }
}

void CS_ResultMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CS_ResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ResultMsg::CopyFrom(const CS_ResultMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CS_ResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ResultMsg::IsInitialized() const {
  return true;
}

void CS_ResultMsg::InternalSwap(CS_ResultMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(winnerid_, other->winnerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ResultMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CS_ConnectMsg* Arena::CreateMaybeMessage< ::proto::CS_ConnectMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CS_ConnectMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SC_ConnectMsg* Arena::CreateMaybeMessage< ::proto::SC_ConnectMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SC_ConnectMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SC_JoinRoomMsg* Arena::CreateMaybeMessage< ::proto::SC_JoinRoomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SC_JoinRoomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SC_StartMsg* Arena::CreateMaybeMessage< ::proto::SC_StartMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SC_StartMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CS_ProgressMsg* Arena::CreateMaybeMessage< ::proto::CS_ProgressMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CS_ProgressMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SC_ProgressMsg* Arena::CreateMaybeMessage< ::proto::SC_ProgressMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SC_ProgressMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CS_InputMsg* Arena::CreateMaybeMessage< ::proto::CS_InputMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CS_InputMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::InputData* Arena::CreateMaybeMessage< ::proto::InputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::InputData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FrameData* Arena::CreateMaybeMessage< ::proto::FrameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FrameData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SC_FrameMsg* Arena::CreateMaybeMessage< ::proto::SC_FrameMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SC_FrameMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CS_ResultMsg* Arena::CreateMaybeMessage< ::proto::CS_ResultMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CS_ResultMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
